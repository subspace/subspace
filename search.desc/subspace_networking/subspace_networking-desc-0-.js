searchState.loadedDescShard("subspace_networking", 0, "Networking functionality of Subspace Network, primarily …\nCan’t preallocate known peers file, probably not enough …\n<code>Node</code> configuration.\nErrors that might happen during network creation.\nKademlia mode will be changed using Autonat protocol when …\nGeneric request with associated response\nDefines generic request-response protocol handler.\nDefines errors for <code>get-closest-peers</code> operation.\nUnderlying protocol returned an incorrect format, …\nI/O error.\nI/O error.\nDefines Kademlia mode\nWrapper data structure that allows to work with keys as …\nHandles networking parameters. It manages network …\nConfiguration for <code>KnownPeersManager</code>.\nNetworking parameters persistence errors.\nDefines operations with the networking parameters.\nSpecifies log-parameters for tracing.\nDefines how many segment headers to return.\nTrait to be implemented on providers of local records\nImplementation of a network node on Subspace Network.\nRunner for the Node.\nNode runner was dropped\nNode runner was dropped\nNode runner was dropped\nDefines request-response protocol name.\nDefines the event triggered when the peer address is …\nRepresents Kademlia events (RoutablePeer, …\nPiece-by-hash protocol request.\nCreate a new piece-by-hash request handler.\nPiece-by-hash protocol response.\nUnderlying protocol returned an error, impossible to get …\nCircuit relay client error.\nResponse type that corresponds to this request\nKademlia’s routable or pending routable peer event.\nCreate a new segment-header-by-segment-indexes request …\nSegment header by segment indexes protocol request.\nSegment header by segment indexes protocol response.\nSegment headers by segment indexes.\nFailed to send command to the node runner\nFailed to send command to the node runner\nFailed to send command to the node runner\nDefines errors for <code>send-request</code> operation.\nThe Kademlia mode is static for the duration of the …\nDefines errors for <code>subscribe</code> operation.\nFailed to create subscription.\nTopic subscription, will unsubscribe when last instance is …\nTransport creation error.\nTransport error when attempting to listen on multiaddr.\nLimited-size max binary heap for Kademlia records’ keys.\nKademlia’s unroutable peer event.\nRegisters a peer ID and associated addresses\nPeer address\nReturns all known peers and their addresses without P2P …\nShould non-global addresses be added to the DHT?\nBan peer with specified peer ID.\nBootstraps Kademlia network\nAddresses to bootstrap Kademlia network\nCreates a reference to the <code>NetworkingParametersRegistry</code> …\nDefines cache size.\nRemove all contents, while keeping allocated capacity\nReturns a collection of currently connected peers.\nCreate a new network node and node runner instances.\nChecks whether the heap contains the given key.\nCreates new <code>GenericRequestHandler</code> by given handler.\nDefines whether we return known peers in …\nNode’s own addresses observed remotely.\nKnown external addresses to the local peer. The addresses …\nDefines interval before the next peer address removes …\nDefines interval before the next peer address removal …\nSize of the backing file on disk\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet closest peers by multihash key using Kademlia DHT.\nGet item providers by its key. Initiate ‘providers’ …\nReturns the request batch handle with common “connection …\nReturn a value from the Kademlia network of the DSN.\nThe configuration for the Gossip behaviour.\nNode’s own local ID.\nThe configuration for the Identify behaviour.\nPeer ID list to filter on address adding.\nHow frequently should random queries be done using …\nInsert a key in the heap evicting (popping) if the size …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the mode is Dynamic.\nReturns true if the mode is Static.\nThe configuration for the Kademlia behaviour.\nKademlia mode. The default value is set to Static(Client). …\nIdentity keypair of a node used for authenticated …\nIterator over all keys in arbitrary order\nA reference to the <code>NetworkingParametersRegistry</code> …\nOptional libp2p prometheus metrics. None will disable …\nList of <code>Multiaddr</code> on which to listen for incoming …\nFallback to random port if specified (or default) port is …\nNode’s own addresses where it listens for incoming …\nExternally provided implementation of the local records …\nEstablished incoming swarm connection limit.\nEstablished outgoing swarm connection limit.\nPending incoming swarm connection limit.\nPending outgoing swarm connection limit.\nInternal prometheus metrics. None will disable metrics …\nObject constructor.\nCreates a new <code>Config</code>.\nConstructs a heap with given PeerId and size limit.\nCallback is called when a peer is connected.\nCallback is called when a peer is disconnected.\nCallback is called when a routable or unraoutable peer is …\nCallback is called when node starts listening on new …\nCallback is called when number of established peer …\nTriggers when we removed the peer address from the …\nDefines whether we enable cache persistence.\nConverts public key from keypair to PeerId. It serves as …\nExtracts peer ID from event.\nPeer ID\nReturned data.\nRequest key - piece index\nDefines protocol version for the network peers. Affects …\nSubcribe a messgo to some topic on the DSN.\nPuts a value into the Kademlia network of the DSN.\nGets a provider record for key that is stored locally\nRemoves a key from the heap.\nUnregisters associated addresses for peer ID.\nUnregisters associated addresses for peer ID.\nThe configuration for the <code>RequestResponsesBehaviour</code> …\nDefines set of peers with a permanent connection (and …\nDrive async work in the persistence provider\nDrives the main networking future forward.\nReturned data.\nSends the generic request to the peer and awaits the …\nSet limit to new value, decreasing to value lower than …\nChecks whether we include the key.\nReturns heap-size\nAmount of time after which stored known peers contents is …\nSubcribe to some topic on the DSN.\nBackoff policy for temporary banning of unreachable peers.\nHow many temporarily banned unreachable peers to keep in …\nAdds a timeout to the setup and protocol upgrade process …\nMiscellaneous utilities for networking.\nYamux multiplexing configuration.\nPeer address\nPeer ID\nPeer ID\nNumber of segment headers to return.\nSegment indexes to get.\nConvenience alias for peer ID and its multiaddresses.\nMetrics for Subspace networking\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines multihash codes for Subspace DSN.\nConstructor\nProvides methods to retrieve pieces from DSN.\nHelper function. Converts multiaddresses to a tuple with …\nType alias for libp2p Multihash. Constant 64 was copied …\nSubspace Network multihash codes.\nPiece index code.\nHelper trait for converting to multihash.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert to multihash by the default multihash code.\nConvert to multihash by the specified multihash code.\nStub implementation for piece validation.\nPiece provider with cancellation and optional piece …\nValidates piece against using its commitment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet piece from archival storage (L1). The algorithm tries …\nReturns piece by its index from farmer’s piece cache (L2)\nGet piece from a particular peer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new piece provider.\nValidates piece against using its commitment.")